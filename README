This is an intelligent email-based agent server, written in Python,
using state machine logic to handle the SMTP protocol.

The server works by responding to email sent to designated inboxes with
canned, dynamic, or custom replies.

Among the included examples, email sent to nyc-weather@ will be
automatically replied with the current forecast for NYC, using data from
the National Weather Service website.

The basic examples do not take account the sender, subject, or email
message text, but the server can be extended with natural language
processing and other AI techniques to provide more customized
auto-replies.

This code is loosely based on Paul Tyma's Mailinator
(http://mailinator.com/) in that it does not support the full range
of SMTP commands, and instead uses ip traps and timeouts to foil
spammers and other scripts or bots, continuing the work described here:
http://denis.papathanasiou.org/?p=747

It also forms the basis for the server used by the TeamWork.io
(http://teamwork.io/) web service.


Getting Started
---------------

 * Note that this server listens to incoming requests, but it does NOT
 provide a way to send outbound emails, so make sure you have a outgoing
 mail server such as Postfix installed and running.

 1. Edit the config.py file in this folder and redefine these variables
 with your server's domain:  domain_logo, server_auto_email,
 smtp_server_domain, and pass_through_target (ideally, the
 pass_through_target address resides on a different server than the one
 running this code).

 2. Edit the action_mailboxes dict in the config.py file. Each key is
 the name of the inbox you want the server to auto-respond to, and the
 value is the name of the function which carries out the request. Each
 function needs to be implemented in agents/responders.py (see the notes
 in that file for the functional prototype requirements), and also look
 at the examples provided.

 3. (optional) Edit the pass_through_mailboxes list in the config.py
 file. These are the inboxes which the server ignores, and just passes
 through to the pass_through_target email address.

 4. (optional) For logging, set the smtp_server_debug variable to True
 (this will record the ip address, timestamp, and all commands up to
 DATA sent to the server by each client).

 5. Run the set_iptables.sh script as root or sudo: sh ./set_iptables.sh
 (if you're not using debian/ubuntu you'll need to edit the line for
 restarting your machine's networking service) you can always undo the
 iptables setting by running the unset_iptables.sh script as root/sudo.

 6. Edit the run_smtps.sh file: by default, the server runs as user
 daemon, but if your auto-responder agents need access to different
 resources/user groups, just change the user defined in line 12, at the
 end of the su -c "" command. The script is designed to restart in case of
 an error, and if you'd like to get the log by email when that happens,
 change the target email address in line 14 (note that logfiles do not
 over-write each other, so you can remove line 14 altogether, if you'd
 rather not get the alert).

 7. Start the server: sh ./run_smtps.sh as root/sudo (if you'll be
 running it long-term, it's best to kick this off inside a screen session,
 from which you can detach).

